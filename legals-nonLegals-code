from cmu_graphics import *

class State:

    def __init__(self, board, legals, notLegals):
        self.board = board
        self.legals = legals
        self.notLegals = notLegals
        self.selection = (0, 0)
        rows, cols = len(self.board), len(self.board[0])
        for row in range(rows):
            for col in range(cols):
                if self.board[row][col] == 0:
                    tempRow = self.getRowRegion(row)
                    tempCol = self.getColRegion(col)
                    tempBlock = self.getBlockRegion(row, col)
                    for num in range(1, 10):
                        if num not in tempRow[0] and num not in tempCol[0] and num not in tempBlock[0]:
                            self.legals[row][col].add(num)
                    for value in tempRow[0]:
                        if value != 0:
                            self.notLegals[row][col].add(value)
                    for value in tempCol[0]:
                        if value != 0:
                            self.notLegals[row][col].add(value)
                    for value in tempBlock[0]:
                        if value != 0:
                            self.notLegals[row][col].add(value)
                    
    # def set(self, row, col, value):
    #     self.board[row][col] = value

    def ban(self, row, col, value):
        # take out of self.legals and put into self.notLegals
        tempRow = self.getRowRegion(row)
        currIndex = None
        for index in range(len(tempRow[1])):
            if tempRow[1][index] == self.selection:
                currIndex = index
        currZeroesIndexes = set()
        for index in range(len(tempRow[0])):
            if index != currIndex:
                if tempRow[0][index] == 0:
                    currZeroesIndexes.add(tempRow[1][index])

        tempCol = self.getColRegion(col)
        for index in range(len(tempCol[1])):
            if tempCol[1][index] == self.selection:
                currIndex = index
        for index in range(len(tempCol[0])):
            if index != currIndex:
                if tempCol[0][index] == 0:
                    currZeroesIndexes.add(tempCol[1][index])

        tempBlock = self.getBlockRegion(row, col)
        for index in range(len(tempBlock[1])):
            if tempBlock[1][index] == self.selection:
                currIndex = index
        for index in range(len(tempBlock[0])):
            if index != currIndex:
                if tempBlock[0][index] == 0:
                    currZeroesIndexes.add(tempBlock[1][index])
        # print(currZeroesIndexes)
        
        for location in currZeroesIndexes:
            self.legals[location[0]][location[1]].remove(value)
            self.notLegals[location[0]][location[1]].add(value)

    def unban(self, row, col, value):
        # put into self.legals and take out of self.notLegals
        tempRow = self.getRowRegion(row)
        currIndex = None
        for index in range(len(tempRow[1])):
            if tempRow[1][index] == self.selection:
                currIndex = index
        currZeroesIndexes = set()
        for index in range(len(tempRow[0])):
            if index != currIndex:
                if tempRow[0][index] == 0:
                    currZeroesIndexes.add(tempRow[1][index])

        tempCol = self.getColRegion(col)
        for index in range(len(tempCol[1])):
            if tempCol[1][index] == self.selection:
                currIndex = index
        for index in range(len(tempCol[0])):
            if index != currIndex:
                if tempCol[0][index] == 0:
                    currZeroesIndexes.add(tempCol[1][index])

        tempBlock = self.getBlockRegion(row, col)
        for index in range(len(tempBlock[1])):
            if tempBlock[1][index] == self.selection:
                currIndex = index
        for index in range(len(tempBlock[0])):
            if index != currIndex:
                if tempBlock[0][index] == 0:
                    currZeroesIndexes.add(tempBlock[1][index])
        
        print(currZeroesIndexes)

        for location in currZeroesIndexes:
            self.legals[location[0]][location[1]].add(value)
            self.notLegals[location[0]][location[1]].remove(value)

    def getRowRegion(self, row):
        rows, cols = len(self.board), len(self.board[0])
        valuesList = self.board[row]
        coordsList = []
        for col in range(cols):
            coordsList.append((row, col))
        return [valuesList, coordsList]

    def getColRegion(self, col):
        rows, cols = len(self.board), len(self.board[0])
        valuesList = []
        coordsList = []
        for row in range(rows):
            valuesList.append(self.board[row][col])
            coordsList.append((row, col))
        return [valuesList, coordsList]

    def getBlockRegion(self, row, col):
        rows, cols = None, None
        blockNum = self.getBlock(row, col)
        valuesList = []
        coordsList = []
        if blockNum == 0 or blockNum == 1 or blockNum == 2:
            rows = (0, 3)
        elif blockNum == 3 or blockNum == 4 or blockNum == 5:
            rows = (3, 6)
        elif blockNum == 6 or blockNum == 7 or blockNum == 8:
            rows = (6, 9)
        if blockNum == 0 or blockNum == 3 or blockNum == 6:
            cols = (0, 3)
        elif blockNum == 1 or blockNum == 4 or blockNum == 7:
            cols = (3, 6)
        elif blockNum == 2 or blockNum == 5 or blockNum == 8:
            cols = (6, 9)
        for row in range(rows[0], rows[1]):
            for col in range(cols[0], cols[1]):
                valuesList.append(self.board[row][col])
                coordsList.append((row, col))
        return [valuesList, coordsList]

    def getBlock(self, row, col): # block number
        blockNum = None
        rowNew = row // 3
        colNew = col // 3
        if colNew == 0:
            blockNum = rowNew
        else:
            blockNum = rowNew + colNew * 3
        return blockNum

# def getCellRegions(self, row, col):

# def getAllRegions(self):

# def getAllRegionsThatContainTargets(self, targets):

def onAppStart(app):
    # givenBoard = getChosenBoard(app)
    # app.board = makeInto2dList(app, givenBoard)
    app.board = [[0, 0, 6, 2, 0, 7, 0, 0, 0], [0, 0, 0, 0, 0, 5, 6, 0, 0], [1, 0, 0, 8, 0, 0, 2, 0, 5], [0, 4, 0, 0, 0, 8, 0, 2, 0], [2, 9, 0, 0, 0, 0, 0, 0, 0], [6, 0, 0, 0, 1, 2, 4, 9, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 7, 0, 0, 0, 0, 1, 9], [0, 0, 5, 0, 3, 0, 0, 0, 0]]
    rows, cols = len(app.board), len(app.board[0])
    app.legals = [[] * 9 for _ in range(9)]
    for row in range(9):
        for num in range(9):
            app.legals[row].append(set())
    app.notLegals = [[] * 9 for _ in range(9)]
    for row in range(9):
        for num in range(9):
            app.notLegals[row].append(set())
    app.state = State(app.board, app.legals, app.notLegals)

def redrawAll(app):
    pass

def onKeyPress(app, key):
    if key == 'enter':
        # app.state.ban(0, 0, 3)
        app.state.unban(0, 0, 3)
        
# why do we have to copy state, why can't modify directly? -- FOR UNDO/REDO

def main():
    runApp()

main()
