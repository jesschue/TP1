def solveMiniSudoku(board, legals):
    result = copy.deepcopy(board)
    tempBoard = copy.deepcopy(board)
    tempLegals = copy.deepcopy(legals)
    return sudokuSolver(result, tempBoard, legals, tempLegals)

def sudokuSolver(board, tempBoard, legals, tempLegals):
    rows, cols = len(board), len(board[0])
    row, col, tempBoard, tempLegals = findEmptyCellWithFewestLegals(tempBoard, tempLegals)
    if isLegalSudoku(board) == False:
        return None
    if row == None:
        return board
    else:
        for number in legals[row][col]:
            if isLegalSudoku(board):
                board[row][col] = number
                solution = sudokuSolver(board, tempBoard, legals, tempLegals)
                if solution != None:
                    return solution
                board[row][col] = 0
        return None

def findEmptyCellWithFewestLegals(tempBoard, tempLegals):
    shortestLen = None
    shortestLegalsCell = None
    for row in range(len(tempLegals)):
        for col in range(len(tempLegals[0])):
            if tempLegals[row][col] != set() and tempBoard[row][col] == 0 and shortestLen == None:
                shortestLen = len(tempLegals[row][col])
                shortestLegalsCell = (row, col)
            elif tempLegals[row][col] != set() and tempBoard[row][col] == 0 and len(tempLegals[row][col]) < shortestLen:
                shortestLen = len(tempLegals[row][col])
                shortestLegalsCell = (row, col)
    tempBoard[row].pop(col)
    tempLegals[row].pop(col)
    return row, col, tempBoard, tempLegals
