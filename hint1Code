from cmu_graphics import * 
import math 
import random
import os
import copy

# CITATIONS 
# start button: https://pixelartmaker.com/art/54b5ab9b34da8a3
# directions page background: https://www.motionelements.com/stock-video-9212534-super-mario-bros-platform-game-on-a-green-screen-background
# starting screen background: https://www.pxfuel.com/en/desktop-wallpaper-gdwza
# blue background with clouds: https://dribbble.com/shots/12294406-Super-Mario-Background
# luigi profile: https://mariopartylegacy.com/characters/luigi/

class State:

    def __init__(self, board, legals, notLegals, selection):
        self.board = board
        self.legals = legals
        self.notLegals = notLegals
        self.selection = selection
        rows, cols = len(self.board), len(self.board[0])
        for row in range(rows):
            for col in range(cols):
                if self.board[row][col] == 0:
                    tempRow = self.getRowRegion(row)
                    tempCol = self.getColRegion(col)
                    tempBlock = self.getBlockRegion(row, col)
                    for num in range(1, 10):
                        if num not in tempRow[0] and num not in tempCol[0] and num not in tempBlock[0]:
                            self.legals[row][col].add(num)
                        else:
                            self.notLegals[row][col].add(num)
        # self.solution = solveMiniSudoku(self.board, self.legals)
        # self.hint1Cell = self.getHint1Cell(self.legals)
                    
    # def set(self, row, col, value):
    #     self.board[row][col] = value

    def ban(self, row, col, value):
        # take out of self.legals and put into self.notLegals
        print(True)
        currZeroesIndexes = set()
        currIndex = None

        tempRow = self.getRowRegion(row)
        currZeroesIndexes, currIndex = self.currZeroesIndexesBan(currIndex, tempRow, currZeroesIndexes)

        tempCol = self.getColRegion(col)
        currZeroesIndexes, currIndex = self.currZeroesIndexesBan(currIndex, tempCol, currZeroesIndexes)

        tempBlock = self.getBlockRegion(row, col)
        currZeroesIndexes, currIndex = self.currZeroesIndexesBan(currIndex, tempBlock, currZeroesIndexes)
        
        for location in currZeroesIndexes:
            if value in self.legals[location[0]][location[1]]: 
                self.legals[location[0]][location[1]].remove(value)
            self.notLegals[location[0]][location[1]].add(value)

    def currZeroesIndexesBan(self, currIndex, location, currZeroesIndexes):
        for index in range(len(location[1])):
            if location[1][index] == self.selection:
                currIndex = index
        for index in range(len(location[0])):
            if index != currIndex:
                if location[0][index] == 0:
                    currZeroesIndexes.add(location[1][index])
        return currZeroesIndexes, currIndex

    def unban(self, row, col, value):
        # put into self.legals and take out of self.notLegals
        currZeroesIndexes = set()
        currIndex = None

        tempRow = self.getRowRegion(row)
        currZeroesIndexes, currIndex = self.currZeroesIndexesUnban(currIndex, tempRow, currZeroesIndexes)

        tempCol = self.getColRegion(col)
        currZeroesIndexes, currIndex = self.currZeroesIndexesUnban(currIndex, tempCol, currZeroesIndexes)

        tempBlock = self.getBlockRegion(row, col)
        currZeroesIndexes, currIndex = self.currZeroesIndexesUnban(currIndex, tempBlock, currZeroesIndexes)

        for location in currZeroesIndexes:
            self.legals[location[0]][location[1]].add(value)
            if value in self.notLegals[location[0]][location[1]]: 
                self.notLegals[location[0]][location[1]].remove(value)
    
    def currZeroesIndexesUnBan(self, currIndex, location, currZeroesIndexes):
        for index in range(len(location[1])):
            if location[1][index] == self.selection:
                currIndex = index
        for index in range(len(location[0])):
            if index != currIndex:
                if location[0][index] == 0:
                    currZeroesIndexes.add(location[1][index])
        return currZeroesIndexes, currIndex

    def getHint1Cell(self, legals):
        hint1Cell = None
        for row in range(len(legals)):
            for col in range(len(legals[0])):
                if len(legals[row][col]) == 1:
                    hint1Cell = (row, col)
                    return hint1Cell
        return None

    def getRowRegion(self, row):
        rows, cols = len(self.board), len(self.board[0])
        valuesList = self.board[row]
        coordsList = []
        for col in range(cols):
            coordsList.append((row, col))
        return [valuesList, coordsList]

    def getColRegion(self, col):
        rows, cols = len(self.board), len(self.board[0])
        valuesList = []
        coordsList = []
        for row in range(rows):
            valuesList.append(self.board[row][col])
            coordsList.append((row, col))
        return [valuesList, coordsList]

    def getBlockRegion(self, row, col):
        rows, cols = None, None
        blockNum = self.getBlock(row, col)
        valuesList = []
        coordsList = []
        if blockNum == 0 or blockNum == 1 or blockNum == 2:
            rows = (0, 3)
        elif blockNum == 3 or blockNum == 4 or blockNum == 5:
            rows = (3, 6)
        elif blockNum == 6 or blockNum == 7 or blockNum == 8:
            rows = (6, 9)
        if blockNum == 0 or blockNum == 3 or blockNum == 6:
            cols = (0, 3)
        elif blockNum == 1 or blockNum == 4 or blockNum == 7:
            cols = (3, 6)
        elif blockNum == 2 or blockNum == 5 or blockNum == 8:
            cols = (6, 9)
        for row in range(rows[0], rows[1]):
            for col in range(cols[0], cols[1]):
                valuesList.append(self.board[row][col])
                coordsList.append((row, col))
        return [valuesList, coordsList]

    def getBlock(self, row, col): # block number
        if 0 <= row <= 2 and 0 <= col <= 2:
            blockNum = 0
        elif 0 <= row <= 2 and 3 <= col <= 5:
            blockNum = 1
        elif 0 <= row <= 2 and 6 <= col <= 8:
            blockNum = 2
        elif 3 <= row <= 5 and 0 <= col <= 2:
            blockNum = 3
        elif 3 <= row <= 5 and 3 <= col <= 5:
            blockNum = 4
        elif 3 <= row <= 5 and 6 <= col <= 8:
            blockNum = 5
        elif 6 <= row <= 8 and 0 <= col <= 2:
            blockNum = 6
        elif 6 <= row <= 8 and 3 <= col <= 5:
            blockNum = 7
        elif 6 <= row <= 8 and 6 <= col <= 8:
            blockNum = 8
        return blockNum

def onAppStart(app):
    app.rows = 9
    app.cols = 9
    app.boardLeft = 50
    app.boardTop = 70
    app.boardWidth = app.width - 100
    app.boardHeight = app.height - 100
    app.cellBorderWidth = 2
    app.characterPopUp = True
    app.selection = None
    app.currentGuess = None
    app.enterValue = False
    app.hint1Level1 = False
    app.hint1Level2 = False
    app.hint1Cell = None
    app.numberOfIncorrect = 0
    app.numberOfCoins = 50
    app.gameHasStarted = False
    app.characterSelectScreen = False 
    app.chooseDifficultyScreen = False 
    app.directionsPartOne = False 
    app.directionsPartTwo = False
    app.playScreen = True
    app.chosenCharacter = None
    app.board = [[6, 0, 0, 1, 3, 2, 4, 0, 9], [7, 3, 4, 0, 0, 0, 0, 6, 0], [2, 1, 0, 0, 6, 0, 0, 0, 8], [9, 0, 6, 8, 0, 0, 0, 4, 5], [8, 5, 1, 3, 0, 0, 7, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0, 1], [0, 0, 0, 4, 0, 0, 0, 0, 3], [3, 4, 0, 9, 0, 5, 0, 8, 0], [1, 9, 0, 6, 8, 0, 0, 5, 0]]
    rows, cols = len(app.board), len(app.board[0])
    app.legals = [[] * cols for _ in range(rows)]
    for row in range(rows):
        for num in range(9):
            app.legals[row].append(set())
    app.notLegals = copy.deepcopy(app.legals)
    app.state = State(app.board, app.legals, app.notLegals, app.selection)
    app.tempLegals = copy.deepcopy(app.state.legals)

def hint1Level1(app):
    if app.hint1Level1:
        app.hint1Cell = app.state.getHint1Cell(app.tempLegals)
    else:
        if app.hint1Cell != None:
            app.tempLegals[app.hint1Cell[0]][app.hint1Cell[1]] = set()

def hint1Level2(app):
    if app.hint1Level2:
        app.hint1Cell = app.state.getHint1Cell(app.tempLegals)
        if app.hint1Cell != None:
            row, col = app.hint1Cell[0], app.hint1Cell[1]
            app.hint1Level2Value = app.legals[row][col].pop()
    else:
        if app.hint1Cell != None:
            row, col = app.hint1Cell[0], app.hint1Cell[1]
            app.board[row][col] = app.hint1Level2Value
            app.state.ban(row, col, app.board[row][col])
            app.tempLegals[row][col] = set()

def redrawAll(app):
    drawBoard(app)
    drawLine(app.boardLeft + 72 * 3, app.boardTop, app.boardLeft + 72 * 3, app.boardTop + 72 * 9, fill = 'black', lineWidth = 8)
    drawLine(app.boardLeft + 72 * 6, app.boardTop, app.boardLeft + 72 * 6, app.boardTop + 72 * 9, fill = 'black', lineWidth = 8)
    drawLine(app.boardLeft, app.boardTop + 72 * 3, app.boardLeft + 72 * 9, app.boardTop + 72 * 3, fill = 'black', lineWidth = 8)
    drawLine(app.boardLeft, app.boardTop + 72 * 6, app.boardLeft + 72 * 9, app.boardTop + 72 * 6, fill = 'black', lineWidth = 8)
    drawBoardBorder(app)

def onKeyPress(app, key):
    # SINGLETONS
    if key == 's':
        for row in range(len(app.legals)):
            for col in range(len(app.legals[0])):
                if len(app.legals[row][col]) == 1:
                    app.board[row][col] = int(app.legals[row][col].pop())
                    break
            break
    elif key == 'h':
        print(True)
        if not app.hint1Level1:
            app.hint1Level1 = True
            hint1Level1(app)
        else:
            app.hint1Level1 = False
            hint1Level1(app)
    elif key == 'H':
        if not app.hint1Level2:
            app.hint1Level2 = True
            hint1Level2(app)
        else:
            app.hint1Level2 = False
            hint1Level2(app)

def getCell(app, x, y):
    dx = x - app.boardLeft
    dy = y - app.boardTop
    cellWidth, cellHeight = getCellSize(app)
    row = math.floor(dy / cellHeight)
    col = math.floor(dx / cellWidth)
    if (0 <= row < app.rows) and (0 <= col < app.cols):
        return (row, col)
    else:
        return None

def drawBoard(app):
    for row in range(app.rows):
        for col in range(app.cols):
            drawCell(app, row, col)  

def drawBoardBorder(app):
  # draw the board outline (with double-thickness):
  drawRect(app.boardLeft, app.boardTop, app.boardWidth, app.boardHeight,
           fill=None, border='black',
           borderWidth=2*app.cellBorderWidth)

def drawCell(app, row, col):
    cellLeft, cellTop = getCellLeftTop(app, row, col)
    cellWidth, cellHeight = getCellSize(app)
    if app.board[row][col] == 0: 
        if app.hint1Level1 == True and app.hint1Cell == (row, col):
            color = 'yellow' if (row, col) == app.hint1Cell else None
        elif app.hint1Level2 == True and app.hint1Cell == (row, col):
            color = 'yellow' if (row, col) == app.hint1Cell else None
        else:
            color = 'cyan' if (row, col) == app.selection else None
        drawRect(cellLeft, cellTop, cellWidth, cellHeight,
                fill=color, border='black',
                borderWidth=app.cellBorderWidth)
        if app.hint1Level2 == True and app.hint1Cell == (row, col):
            drawLabel(app.hint1Level2Value, cellLeft + cellWidth//2, cellTop + cellHeight//2, size = app.width // 20, fill = 'black', align='center')
    else: 
        drawRect(cellLeft, cellTop, cellWidth, cellHeight,
                fill='lightGray', border='black',
                borderWidth=app.cellBorderWidth)
    if app.board[row][col] != 0:
        drawLabel(app.board[row][col], cellLeft + cellWidth//2, cellTop + cellHeight//2, size = app.width // 20, fill = 'black', align='center')
    else:
        if (row, col) == app.selection and app.currentGuess != None and app.board[row][col] == 0:
            drawLabel(app.currentGuess, cellLeft + cellWidth//2, cellTop + cellHeight//2, size = 18, fill = 'black', align='center')
        else:
            for num in app.state.legals[row][col]:
                if (row, col) != app.hint1Cell:
                    if num == 1:
                        drawLabel('1', cellLeft + app.width // 75, cellTop + app.width // 75, size = app.width // 50, fill = 'gray')
                    elif num == 2:
                        drawLabel('2', cellLeft + (app.width // 75)*3.5, cellTop + app.width // 75, size = app.width // 50, fill = 'gray')
                    elif num == 3:
                        drawLabel('3', cellLeft + (app.width // 75)*6, cellTop + app.width // 75, size = app.width // 50, fill = 'gray')
                    elif num == 4:
                        drawLabel('4', cellLeft + app.width // 75, cellTop + (app.width // 75)*3.5, size = app.width // 50, fill = 'gray')
                    elif num == 5:
                        drawLabel('5', cellLeft + (app.width // 75)*3.5, cellTop + (app.width // 75)*3.5, size = app.width // 50, fill = 'gray')
                    elif num == 6:
                        drawLabel('6', cellLeft + (app.width // 75)*6, cellTop + (app.width // 75)*3.5, size = app.width // 50, fill = 'gray')
                    elif num == 7:
                        drawLabel('7', cellLeft + app.width // 75, cellTop + (app.width // 75)*6, size = app.width // 50, fill = 'gray')
                    elif num == 8:
                        drawLabel('8', cellLeft + (app.width // 75)*3.5, cellTop + (app.width // 75)*6, size = app.width // 50, fill = 'gray')
                    elif num == 9:
                        drawLabel('9', cellLeft + (app.width // 75)*6, cellTop + (app.width // 75)*6, size = app.width // 50, fill = 'gray')

def getCellLeftTop(app, row, col):
    cellWidth, cellHeight = getCellSize(app)
    cellLeft = app.boardLeft + col * cellWidth
    cellTop = app.boardTop + row * cellHeight
    return (cellLeft, cellTop)

def getCellSize(app):
    cellWidth = app.boardWidth / app.cols
    cellHeight = app.boardHeight / app.rows
    return (cellWidth, cellHeight)

def main():
    runApp(750, 750)

main()
