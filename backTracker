VERSION 1:

# inspiration taken from solveMiniSudoku on CS Academy
def solveMiniSudoku(board, legals):
    result = copy.deepcopy(board)
    tempBoard = copy.deepcopy(board)
    tempLegals = copy.deepcopy(legals)
    alreadySeen = set()
    return sudokuSolver(result, tempBoard, legals, tempLegals, alreadySeen)

def sudokuSolver(board, tempBoard, legals, tempLegals, alreadySeen):
    rows, cols = len(board), len(board[0])
    row, col, tempBoard, tempLegals = findEmptyCellWithFewestLegals(tempBoard, tempLegals, alreadySeen)
    if isLegalSudoku(board) == False:
        return None
    if row == None:
        return board
    else:
        for number in legals[row][col]:
            if isLegalSudoku(board):
                board[row][col] = number
                print(row, col)
                print(board)
                solution = sudokuSolver(board, tempBoard, legals, tempLegals)
                if solution != None:
                    return solution
                board[row][col] = 0
        return None

def findEmptyCellWithFewestLegals(tempBoard, tempLegals):
    tempTempLegals = flatten(tempLegals)
    if len(tempTempLegals) == tempTempLegals.count(set()): # works
        return None, None, None, None
    shortestLen = None
    shortestLegalsCell = None
    for row in range(len(tempLegals)):
        colLength = len(tempLegals[row])
        for col in range(colLength):
            if tempLegals[row][col] != set() and tempBoard[row][col] == 0 and shortestLen == None:
                shortestLen = len(tempLegals[row][col])
                shortestLegalsCell = (row, col)
            elif tempLegals[row][col] != set() and tempBoard[row][col] == 0 and len(tempLegals[row][col]) < shortestLen:
                shortestLen = len(tempLegals[row][col])
                shortestLegalsCell = (row, col)
    tempBoard[shortestLegalsCell[0]].pop(shortestLegalsCell[1]) # indexing into wrong index on board because popping
    tempLegals[shortestLegalsCell[0]].pop(shortestLegalsCell[1])
    return shortestLegalsCell[0], shortestLegalsCell[1], tempBoard, tempLegals

VERSION 2:

# inspiration taken from solveMiniSudoku on CS Academy
def solveMiniSudoku(board, legals):
    result = copy.deepcopy(board)
    tempBoard = copy.deepcopy(board)
    tempLegals = copy.deepcopy(legals)
    alreadySeen = set()
    return sudokuSolver(result, tempBoard, legals, tempLegals, alreadySeen)

def sudokuSolver(board, tempBoard, legals, tempLegals, alreadySeen):
    rows, cols = len(board), len(board[0])
    row, col, tempBoard, tempLegals, alreadySeen = findEmptyCellWithFewestLegals(tempBoard, tempLegals, alreadySeen)
    if isLegalSudoku(board) == False:
        return None
    if row == None:
        return board
    else:
        for number in legals[row][col]:
            if isLegalSudoku(board):
                board[row][col] = number
                solution = sudokuSolver(board, tempBoard, legals, tempLegals, alreadySeen)
                if solution != None:
                    return solution
                board[row][col] = 0
        return None

def findEmptyCellWithFewestLegals(tempBoard, tempLegals, alreadySeen):
    if len(alreadySeen) == 81:
        return None, None, None, None
    shortestLen = None
    shortestLegalsCell = None
    for row in range(len(tempLegals)):
        colLength = len(tempLegals[row])
        for col in range(colLength):
            if (row, col) not in alreadySeen:
                if tempLegals[row][col] != set() and tempBoard[row][col] == 0 and shortestLen == None:
                    shortestLen = len(tempLegals[row][col])
                    shortestLegalsCell = (row, col)
                elif tempLegals[row][col] != set() and tempBoard[row][col] == 0 and len(tempLegals[row][col]) < shortestLen:
                    shortestLen = len(tempLegals[row][col])
                    shortestLegalsCell = (row, col)
    alreadySeen.add(shortestLegalsCell)
    return shortestLegalsCell[0], shortestLegalsCell[1], tempBoard, tempLegals, alreadySeen
